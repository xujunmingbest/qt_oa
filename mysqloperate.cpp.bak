#include "mysqloperate.h"
#include "QMessageBox.h"
#include <QCryptographicHash>
QSqlDatabase MysqlOperate::defaultDB;



QString g_Name; //登入名字
QString g_Auth;
QString g_ChargeName;


MysqlOperate::MysqlOperate()
{


}


bool MysqlOperate::MysqlOpen(){
    defaultDB = QSqlDatabase::addDatabase("QMYSQL");
    {
        defaultDB.setDatabaseName( "userdata" );
        defaultDB.setUserName( "root" );
        defaultDB.setPassword( "123456" );
        defaultDB.setHostName( "127.0.0.1" );

        if ( defaultDB.open() ) {
            defaultDB.exec("SET NAMES 'gbk'");
            return true;
        }else{
              QMessageBox::about(NULL, "错误提示", defaultDB.lastError().databaseText());
              return false;
        }
    }
}


bool MysqlOperate::UserLogin(QString name,QString password){
    QByteArray passwordmd5;
    passwordmd5 = QCryptographicHash::hash(password.toLatin1(),QCryptographicHash::Md5);

    QString sq=QStringLiteral("select * from user where username = '%1' and password = '%2'").arg(name,QString(passwordmd5.toHex()));
    qDebug() << sq;
    QSqlQuery query(sq);
    if( query.isActive()){
        while(query.next()){
            g_Auth = query.value(1).toString();
            g_ChargeName = query.value(2).toString();
            g_Name = query.value(3).toString();
            qDebug() << g_Auth;
            qDebug() << g_ChargeName;
            qDebug() << g_Name;
            return true;
        }
    }
    return false;
}

#include <QJsonObject>
#include <QJsonDocument>
QJsonObject MysqlOperate::GetAuth(){
    QJsonObject jo;
            QString AuthType;

    {
        QString sq=QStringLiteral("select module from user_authority where role = '%1'").arg(g_Auth);
        qDebug() << sq;
        QSqlQuery query(sq);
        if( query.isActive()){
            while(query.next()){
               QString jsonString = query.value(0).toString();

                QJsonDocument jsonDocument = QJsonDocument::fromJson(jsonString.toStdString().data());
                if( jsonDocument.isNull() ){
                    qDebug()<< "===> please check the string "<< jsonString;
                }
                jo = jsonDocument.object();
               return jo;

            }
        }else{
            QMessageBox::about(NULL, "错误提示", "权限获取失败");
            return jo;
        }
    }

}

bool MysqlOperate::AddLiuShuiZhang(S_AddLiuShuiZhang &data){

    {
        QString sq=QStringLiteral("insert into liushuizhang ("
                                  "categoryType,categoryName,moneyAmount,moneyRemain,"
                                  "remark,bookkeeper,chargeName,status"
                                  ") values("
                                  "'%1','%2',%3,%4,'%5','%6','%7','%8')")
                .arg(data.KuangXiangType).arg(data.KuangXiangName).arg(data.money).arg(data.moneyRemain).
                     arg(data.BeiZhu).arg(data.bookKeeper).arg(data.chargeName).arg(data.Status);
        qDebug() << sq;
        QSqlQuery query;
        query.exec(sq);
        if( query.isActive()){
            QMessageBox::about(NULL, "提示", " 添加流水账成功 ");
            return true;
        }else{
            QMessageBox::about(NULL, "错误提示", query.lastError().databaseText());
            QMessageBox::about(NULL, "错误提示", " 添加流水账失败 ");
            return false;
        }
    }

}
